abstract class FileSystemItem
{
    protected string name;
    protected bool isHidden;

    public FileSystemItem(string name, bool isHidden)
    {
        this.name = name;
        this.isHidden = isHidden;
    }

    public abstract string GetSize();
    public abstract void DisplayInfo();
}

class DirectoryItem : FileSystemItem
{
    private DirectoryInfo directoryInfo;

    public DirectoryItem(string path) : base(new DirectoryInfo(path).Name, new DirectoryInfo(path).Attributes.HasFlag(FileAttributes.Hidden))
    {
        directoryInfo = new DirectoryInfo(path);
    }

    public override string GetSize()
    {
        return "Папка";
    }

    public override void DisplayInfo()
    {
        if (isHidden)
        {
            Console.ForegroundColor = ConsoleColor.Blue;
            Console.WriteLine($"{name} - {GetSize()} (Скрытая)");
        }
        else
        {
            Console.ForegroundColor = ConsoleColor.Red;
            Console.WriteLine($"{name} - {GetSize()}");
        }
        Console.ResetColor();
    }

    public IEnumerable<FileSystemItem> GetContents()
    {
        // Получаем все файлы и папки, включая скрытые
        foreach (var item in directoryInfo.GetFileSystemInfos())
        {
            if (item.Attributes.HasFlag(FileAttributes.Directory))
            {
                yield return new DirectoryItem(item.FullName);
            }
            else
            {
                yield return new FileItem(item.FullName);
            }
        }
    }
}

class FileItem : FileSystemItem
{
    private FileInfo fileInfo;

    public FileItem(string path) : base(new FileInfo(path).Name, new FileInfo(path).Attributes.HasFlag(FileAttributes.Hidden))
    {
        fileInfo = new FileInfo(path);
    }

    public override string GetSize()
    {
        return $"{fileInfo.Length / 1024.0:F2} KB";
    }

    public override void DisplayInfo()
    {
        if (isHidden)
        {
            Console.ForegroundColor = ConsoleColor.Green;
            Console.WriteLine($"{name} - {GetSize()} (Скрытый)");
        }
        else if (fileInfo.Attributes.HasFlag(FileAttributes.Archive))
        {
            Console.ForegroundColor = ConsoleColor.Yellow;
            Console.WriteLine($"{name} - {GetSize()} (Архивный)");
        }
        else
        {
            Console.ForegroundColor = ConsoleColor.White;
            Console.WriteLine($"{name} - {GetSize()}");
        }

        Console.ResetColor();
    }
}

class FileSystemManager
{
    private string path;

    public void SetPath(string path)
    {
        this.path = path;
    }

    public void DisplayDirectoryContents()
    {
        try
        {
            DirectoryItem directory = new DirectoryItem(path);

            if (!Directory.Exists(path))
            {
                Console.WriteLine("Указанная директория не существует.");
                return;
            }

            Console.WriteLine($"Содержимое директории: {directory.GetSize()}");

            foreach (var item in directory.GetContents())
            {
                item.DisplayInfo();
            }
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Ошибка: {ex.Message}");
        }
    }
}

class Program
{
    static void Main(string[] args)
    {
        Console.Write("Введите путь: ");
        string path = Console.ReadLine();

        FileSystemManager manager = new FileSystemManager();
        manager.SetPath(path);
        manager.DisplayDirectoryContents();
    }
}
